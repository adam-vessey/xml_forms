<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Url;

// Constants.
// @codingStandardsIgnoreStart
define('XML_FORM_BUILDER_LIST_FORMS_PERMS', 'List XML Forms');
define('XML_FORM_BUILDER_CREATE_FORMS_PERMS', 'Create XML Forms');
define('XML_FORM_BUILDER_EDIT_FORMS_PERMS', 'Edit XML Forms');
define('XML_FORM_BUILDER_DELETE_FORMS_PERMS', 'Delete XML Forms');
define('XML_FORM_BUILDER_ASSOCIATE_FORMS_PERMS', 'Associate XML Forms');

define('XML_FORM_BUILDER_ADMIN_MENU', 'admin/config/islandora/xmlform');
define('XML_FORM_BUILDER_MAIN_MENU', XML_FORM_BUILDER_ADMIN_MENU . '/forms');
define('XML_FORM_BUILDER_ASSOCIATIONS', XML_FORM_BUILDER_ADMIN_MENU . '/associations');
define('XML_FORM_BUILDER_SETTINGS_MENU', XML_FORM_BUILDER_ADMIN_MENU . '/settings');
define('XML_FORM_BUILDER_XSLTS_MENU', XML_FORM_BUILDER_ADMIN_MENU . '/xslts');
define('XML_FORM_BUILDER_ADD_XSLTS_MENU', XML_FORM_BUILDER_XSLTS_MENU . '/add_xslt');
define('XML_FORM_BUILDER_ADD_DC_MAPPING_MENU', XML_FORM_BUILDER_XSLTS_MENU . '/add_default_dc_mapping');
define('XML_FORM_BUILDER_CREATE_MENU', XML_FORM_BUILDER_MAIN_MENU . '/create');
define('XML_FORM_BUILDER_IMPORT_MENU', XML_FORM_BUILDER_MAIN_MENU . '/import');
define('XML_FORM_BUILDER_VIEW_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/view');
define('XML_FORM_BUILDER_COPY_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/copy');
define('XML_FORM_BUILDER_EDIT_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/edit');
define('XML_FORM_BUILDER_DELETE_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/delete');
define('XML_FORM_BUILDER_ASSOCIATIONS_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/associations');
define('XML_FORM_BUILDER_ASSOCIATE_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/associate/%');
define('XML_FORM_BUILDER_DISASSOCIATE_MENU', XML_FORM_BUILDER_MAIN_MENU . '/%/disassociate/%');
define('XML_FORM_BUILDER_EXPORT_CALLBACK', XML_FORM_BUILDER_MAIN_MENU . '/%/export');
define('XML_FORM_BUILDER_SAVE_CALLBACK', XML_FORM_BUILDER_MAIN_MENU . '/%/edit/save');
define('XML_FORM_BUILDER_EDIT_DATASTREAM_MENU', 'islandora/edit_form/%islandora_object/%');

// Hooks.
define('XML_FORM_BUILDER_GET_FORM_MODIFY_DEFINITION_HOOK', 'xml_form_builder_get_form_modify_definition');

define('PERM_XML_FORM_BUILDER_LIST_FORMS', XML_FORM_BUILDER_LIST_FORMS_PERMS);
define('PERM_XML_FORM_BUILDER_CREATE_FORMS', XML_FORM_BUILDER_CREATE_FORMS_PERMS);
define('PERM_XML_FORM_BUILDER_EDIT_FORMS', XML_FORM_BUILDER_EDIT_FORMS_PERMS);
define('PERM_XML_FORM_BUILDER_DELETE_FORMS', XML_FORM_BUILDER_DELETE_FORMS_PERMS);
define('PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS', XML_FORM_BUILDER_ASSOCIATE_FORMS_PERMS);
define('MENU_XML_FORM_BUILDER_MAIN', XML_FORM_BUILDER_MAIN_MENU);
define('MENU_XML_FORM_BUILDER_CREATE', XML_FORM_BUILDER_CREATE_MENU);
define('MENU_XML_FORM_BUILDER_IMPORT', XML_FORM_BUILDER_IMPORT_MENU);
define('MENU_XML_FORM_BUILDER_VIEW', XML_FORM_BUILDER_VIEW_MENU);
define('MENU_XML_FORM_BUILDER_COPY', XML_FORM_BUILDER_COPY_MENU);
define('MENU_XML_FORM_BUILDER_EDIT', XML_FORM_BUILDER_EDIT_MENU);
define('MENU_XML_FORM_BUILDER_DELETE', XML_FORM_BUILDER_DELETE_MENU);
define('MENU_XML_FORM_BUILDER_ASSOCIATIONS', XML_FORM_BUILDER_ASSOCIATIONS_MENU);
define('MENU_XML_FORM_BUILDER_ASSOCIATE', XML_FORM_BUILDER_ASSOCIATE_MENU);
define('MENU_XML_FORM_BUILDER_DISASSOCIATE', XML_FORM_BUILDER_DISASSOCIATE_MENU);
define('MENU_CALLBACK_XML_FORM_BUILDER_EXPORT', XML_FORM_BUILDER_EXPORT_CALLBACK);
define('MENU_CALLBACK_XML_FORM_BUILDER_SAVE', XML_FORM_BUILDER_SAVE_CALLBACK);
define('MENU_XML_FORM_BUILDER_EDIT_DATASTREAM', XML_FORM_BUILDER_EDIT_DATASTREAM_MENU);
// @codingStandardsIgnoreEnd

/**
 * Access callback for the XSLTs admin page.
 */
function xml_form_builder_xslts_access() {
  if (\Drupal::currentUser()->hasPermission(XML_FORM_BUILDER_ASSOCIATE_FORMS_PERMS) &&
    \Drupal::config('xml_form_builder.settings')->get('xml_form_builder_use_default_dc_xslts')) {
    return AccessResult::allowed();
  }
  return AccessResult::forbidden();
}

/**
 * Access callback for editing / creating a datastream.
 */
function xml_form_builder_datastream_access($perm, $object, $dsid) {
  $object = islandora_object_load($object);
  if (isset($object[$dsid])) {
    return AccessResult::allowedIf(islandora_datastream_access($perm, $object[$dsid]));
  }
  return AccessResult::allowedIf(islandora_object_access($perm, $object));
}

/**
 * Implements hook_forms().
 *
 * Acquires the form from XMLFormRepository, if it exists and is valid.
 */
function xml_form_builder_forms($form_id, $args) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  if (XMLFormRepository::exists($form_id) && XMLFormRepository::valid($form_id)) {
    return [
      $form_id => [
        'callback' => 'xml_form_builder_get_form',
        'callback arguments' => [$form_id],
      ],
    ];
  }
  return [
    $form_id => [],
  ];
}

/**
 * Gets the path to the copy page for the given form name.
 *
 * @param string $form_name
 *   The form to load the copy page with,.
 *
 * @return string
 *   The path to the copy page.
 */
function xml_form_builder_get_copy_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_COPY_MENU);
}

/**
 * Gets the path to the edit page for the given form name.
 *
 * @param string $form_name
 *   The form to load the edit page with,.
 *
 * @return string
 *   The path to the edit page.
 */
function xml_form_builder_get_edit_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_EDIT_MENU);
}

/**
 * Gets the path to the view page for the given form name.
 *
 * @param string $form_name
 *   The form to load the view page with,.
 *
 * @return string
 *   The path to the view page.
 */
function xml_form_builder_get_view_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_VIEW_MENU);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,.
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_export_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_EXPORT_CALLBACK);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,.
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_delete_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_DELETE_MENU);
}

/**
 * Gets the path to the associations page for the given form name.
 *
 * @param string $form_name
 *   The form to load the associations page with,.
 *
 * @return string
 *   The path to the associations page.
 */
function xml_form_builder_get_associate_form_path($form_name) {
  return str_replace('%', $form_name, XML_FORM_BUILDER_ASSOCIATIONS_MENU);
}

/**
 * Gets a Form from the database.
 *
 * Modules should implement xml_form_builder_get_form_modify_definition hook
 * when they need to make modifications form builder schema that is loaded
 * into the form.  This is currently needed to allow for the modifications of
 * tab panel element access so that when it adds a new element the default
 * schema template will have the correct permissions to make the element
 * accessible.
 *
 * @param array $form
 *   An array containing any "wrapping" elements.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The Drupal Form State.
 * @param string $form_name
 *   The Form to render.
 * @param string $xml
 *   The metadata to prepopulate the form with,.
 * @param array $parents
 *   An array containing the offset of the parents.
 *
 * @return array
 *   The Drupal Form, if it exists FALSE otherwise.
 */
function xml_form_builder_get_form(array $form, FormStateInterface $form_state, $form_name, $xml = NULL, array $parents = []) {
  $form_state->loadInclude('xml_form_builder', 'inc', 'XMLFormRepository');
  $form_state->loadInclude('xml_form_api', 'inc', 'XMLForm');
  $form_state->loadInclude('xml_form_api', 'inc', 'XMLFormDefinition');
  if (!XMLFormRepository::exists($form_name)) {
    drupal_set_message(t('The form "%name" does not exist.', ['%name' => $form_name]));
    return FALSE;
  }
  elseif (!XMLFormRepository::valid($form_name)) {
    drupal_set_message(t('The Drupal form "%name" exists but is not valid. Please notify the administrator.', ['%name' => $form_name]));
    return FALSE;
  }
  try {
    $xml_form = new XMLForm($form_state, $parents, $form_name);
    // Was not initialized from storage.
    if (!$xml_form->isInitialized()) {
      $definition = new XMLFormDefinition(XMLFormRepository::get($form_name));
      $document = $definition->createXmlDocument($xml);
      $form = $definition->getForm();
      \Drupal::moduleHandler()->alter(XML_FORM_BUILDER_GET_FORM_MODIFY_DEFINITION_HOOK, $form,
        $form_state);
      $xml_form->initialize($form, $document);
    }
    $form = array_merge($form, $xml_form->toArray($form_state));
  }
  catch (Exception $e) {
    // Catch any errors that occured and display them to the user so that they
    // may correct their form definition.
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message(Xss::filter($msg), 'error');
    return FALSE;
  }
  return $form;
}

/**
 * Implements hook_islandora_ingest_steps().
 *
 * If the given configuration has more that one metadata form association add
 * the select form step, if it only has one
 * The add that metadata form as a step.
 */
function xml_form_builder_islandora_ingest_steps(FormStateInterface $form_state) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  $association_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_association_step');
  if (empty($shared_storage['models'])) {
    return;
  }
  $associations = xml_form_builder_get_associations([], $shared_storage['models'], []);
  // If the user has selected association use that one, otherwise assume there
  // is only one association.
  $association = isset($association_step_storage['association']) ? $association_step_storage['association'] : reset($associations);
  $num_associations = count($associations);
  $select_association_step = ($num_associations > 1) ? [
    'weight' => 0,
    'type' => 'form',
    'form_class' => 'Drupal\xml_form_builder\Form\SelectAssociationForm',
    'module' => 'xml_form_builder',
    'file' => 'includes/select_association.form.inc',
    'args' => [$associations],
  ] : NULL;
  $metadata_step = ($num_associations >= 1) ? [
    'weight' => 5,
    'type' => 'form',
    'form_class' => 'Drupal\xml_form_builder\Form\IngestForm',
    'module' => 'xml_form_builder',
    'file' => 'includes/ingest.form.inc',
    'args' => [$association],
  ] : NULL;
  return [
    'xml_form_builder_association_step' => $select_association_step,
    'xml_form_builder_metadata_step' => $metadata_step,
  ];
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function xml_form_builder_islandora_edit_datastream_registry(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $associations = xml_form_builder_get_associations([], $object->models, [$datastream->id]);
  if (count($associations) > 0) {
    return [
      'xml_form_builder_edit_form_registry' => [
        'name' => t('Islandora Content Model Forms'),
        'url' => Url::fromRoute(
          'xml_form_builder.datastream_form',
          ['object' => $object->id, 'dsid' => $datastream->id]
        )->toString(),
      ],
    ];
  }
}

/**
 * This function is used by ingest/edit to update the given object.
 *
 * @param AbstractObject $object
 *   The object to update.
 * @param array $association
 *   The association used to update the objects datastreams.
 * @param XMLDocument $document
 *   The generated metadata document to add to the object.
 * @param string $label
 *   A new label for the given object, if NULL then the label is not set.
 *
 * @return array
 *   An associative array where the keys are DSID's and the values are booleans
 *   that state if the given datastream was created (TRUE) or updated (FALSE).
 */
function xml_form_builder_update_object(AbstractObject $object, array $association, XMLDocument $document, $label = NULL) {
  if ($label) {
    $object->label = $label;
  }
  $object->models = array_merge($object->models, [$association['content_model']]);
  $document = $document->document;
  $run_transforms = !\Drupal::config('xml_form_builder.settings')->get('xml_form_builder_use_default_dc_xslts');
  if (isset($association['self_transform']) && $association['self_transform'] != 'No Transform' && $run_transforms) {
    $document = xml_form_builder_transform_metadata_datastream($document, $association['self_transform']);
  }
  $created = xml_form_builder_update_metadata_datastream($object, $association['dsid'], $document);

  $created_dc = FALSE;
  if ($run_transforms) {
    $created_dc = xml_form_builder_update_dc_datastream($object, $association['transform'], $document);
  }

  return [$association['dsid'] => $created, 'DC' => $created_dc];
}

/**
 * Applies xslt to incoming datastream.
 *
 * @param DOMDocument $source_document
 *   Document to be transformed.
 * @param string $transform
 *   Name of xslt to be applied.
 *
 * @return DOMDocument
 *   Transformed document on success, original on failure.
 */
function xml_form_builder_transform_metadata_datastream(DOMDocument $source_document, $transform = NULL) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $transform_path = NULL;
  $transforms = xml_form_builder_get_self_transforms();
  // No transform has no file.
  unset($transforms['No Transform']);
  if (array_key_exists($transform, $transforms)) {
    $transform_path = $transforms[$transform];
  }

  if ($transform_path) {
    $xsl = new DOMDocument();
    $xsl->load($transform_path);
    $xslt = new XSLTProcessor();
    $xslt->importStyleSheet($xsl);
    $document = $xslt->transformToDoc($source_document);
    return $document;
  }
  return $source_document;
}

/**
 * Updates the given metadata datastream with the given document.
 *
 * @param AbstractObject $object
 *   The object to update.
 * @param string $datastream_id
 *   The datastream to update.
 * @param DOMDocument $document
 *   The document to transform.
 *
 * @return bool
 *   TRUE if the datastream was created, FALSE if it was updated.
 */
function xml_form_builder_update_metadata_datastream(AbstractObject $object, $datastream_id, DOMDocument $document) {
  $created = FALSE;
  $document->preserveWhiteSpace = TRUE;
  $document->formatOutput = TRUE;
  if (isset($object[$datastream_id])) {
    $datastream = $object[$datastream_id];
    $datastream->setContentFromString(trim($document->saveXML()));
    if ($datastream->label != "$datastream_id Record") {
      $datastream->label = "$datastream_id Record";
    }
    if ($datastream->mimetype != 'application/xml') {
      $datastream->mimetype = 'application/xml';
    }
  }
  else {
    $datastream = $object->constructDatastream($datastream_id, 'M');
    $datastream->setContentFromString(trim($document->saveXML()));
    $datastream->label = "$datastream_id Record";
    $datastream->mimetype = 'application/xml';
    $object->ingestDatastream($datastream);
    $created = TRUE;
  }
  return $created;
}

/**
 * Updates the DC datastream by applying the given transform.
 *
 * @param AbstractObject $object
 *   The object whose DC will be updated.
 * @param string|DOMDocument $transform
 *   The transform to apply, as defined by the forms association or a
 *   DOMDocument housing an XSLT.
 * @param DOMDocument $document
 *   The document to transform.
 */
function xml_form_builder_update_dc_datastream(AbstractObject $object, $transform, DOMDocument $document) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $created = FALSE;
  if (!($transform instanceof DOMDocument)) {
    $transform = xml_form_builder_get_transform_file($transform);
  }
  if ($transform) {
    if (empty($object['DC'])) {
      $dc_datastream = $object->constructDatastream('DC', 'X');
      $dc_datastream->label = 'DC Record';
      $object->ingestDatastream($dc_datastream);
      $created = TRUE;
    }
    else {
      $dc_datastream = $object['DC'];
    }
    // Since we typically use the LOC transform for MODS => DC, and
    // mods:modsCollection results in DC format we don't support (non OAI), we
    // catch this exceptional case here before transforming. This use case only
    // handles a single MODS document within a mods:modsCollection if there are
    // multiple or if the given document is not MODS the transform does nothing.
    $document = xml_form_builder_transform_mods_collection_hack($document);
    $transformed_dc_doc = xml_form_builder_transform_document($transform, $document);
    $dc_datastream->setContentFromString($transformed_dc_doc->saveXML());
  }
  return $created;
}

/**
 * Extracts the MODS document from a mods:modsCollection element if present.
 *
 * For any document which does not have a mods:modsCollection element, the
 * transform does nothing.
 *
 * @param DOMDocument $document
 *   The Document to transform.
 *
 * @return DOMDocument
 *   The transformed document.
 */
function xml_form_builder_transform_mods_collection_hack(DOMDocument $document) {
  $xsl = new DOMDocument();
  $xsl->load(drupal_get_path('module', 'xml_form_builder') . '/xml/extract_mods_from_collection.xsl');
  $xslt = new XSLTProcessor();
  $xslt->importStyleSheet($xsl);
  return $xslt->transformToDoc($document);
}

/**
 * Implements hook_help().
 */
function xml_form_builder_help($route) {
  if ($route == 'xml_form_builder.settings_form') {
    $output_array = [
      '#type' => 'item',
      '#markup' => t('The "Use Default DC XSLTs" checkbox overrides the ability
        to have a custom DC XSLT and self transform with each form association.
        It does, however, allow for the default DC XSLTs to be run whenever the
        source datastream is updated.  It is recomended that this only be set
        at install time so as to maintain consistent DC metadata.'
      ),
    ];
    return \Drupal::service("renderer")->render($output_array);
  }
}

/**
 * Implements hook_islandora_derivative().
 *
 * Dynamically maps the derivatives based on the database.
 */
function xml_form_builder_islandora_derivative(AbstractObject $object = NULL) {
  if (!\Drupal::config('xml_form_builder.settings')->get('xml_form_builder_use_default_dc_xslts') || !$object) {
    return;
  }
  module_load_include('inc', 'xml_form_builder', 'includes/db');
  $mappings = xml_form_builder_get_default_dc_xslt_mappings();
  $derivatives = [];
  foreach ($mappings as $mapping) {
    if (in_array($mapping['content_model'], $object->models)) {
      $derivatives[] = [
        'source_dsid' => $mapping['dsid'],
        'destination_dsid' => 'DC',
        'function' => ['xml_form_builder_derive_dc'],
        'file' => drupal_get_path('module', 'xml_form_builder') . '/includes/derivatives.inc',
      ];
    }
  }
  return $derivatives;
}
